== Libraries modules

libraries are prebuilt python modules that give added features to QTvcp. +
In this way you can select what features you want - yet don't have to build common ones yourself. +

=== GSTAT

GSTAT is a library that sends GObject messages based on linuxcnc's current state. +
It also has some functions to do things such as jogging. +
You connect a function call to the GSTAT message you are interested in. +
QTvcp will call this function when the message is sent from GSTAT. +

To import this modules add this python code to your import section: +
[source,python]
----
from qtvcp.qt_glib import GStat
----
To instantiate the module so you can use it add this python code to your instantiate section: +
[source,python]
----
GSTAT = GStat()
----
To connect to messages use GObject syntax. For example to catch machine on and off messages, +
place these commands into the INITIALIZE section: +
[source,python]
----
        GSTAT.connect('state-on', self.on_state_on)
        GSTAT.connect('state-off', self.on_state_off)
----
In this example code when linuxcnc is in machine on state the function self.on_state_on will be called. +
When linuxcnc is in machine off state the function self.on_state_off will be called. +

=== IStat

IStat is a library to collect and filters data from the INI file. +

The available data and defaults: +
----
inifile = linuxcnc.ini(INIPATH) +
MDI_HISTORY_PATH = '~/.axis_mdi_history' +
PREFERENCE_PATH = '~/.Preferences' +
SUB_PATH = None +
PROGRAM_FILTERS = None +
PARAMETER_FILE = None +
MACHINE_IS_LATHE = False +
MACHINE_IS_METRIC = False +
MACHINE_UNIT_CONVERSION = 1 +
MACHINE_UNIT_CONVERSION_9 = [1]*9 +
AVAILABLE_AXES = ('X','Y','Z') +
AVAILABLE_AXES_INT = (0,1,2) +
NO_HOME_REQUIRED = False +
JOG_INCREMENTS = None +
ANGULAR_INCREMENTS = None +
 +
MAX_LINEAR_VELOCITY = 60 +
DEFAULT_LINEAR_VELOCITY = 15.0 +
 +
DEFAULT_SPINDLE_SPEED = 200 +
MAX_FEED_OVERRIDE = 1.5 +
MAX_SPINDLE_OVERRIDE = 1.5 +
MIN_SPINDLE_OVERRIDE = 0.5 +
----
There are some 'helper functions' - mostly used for widget support +
----
convert_units(self, data)
convert_units_9(self,data):
get_filter_program(self, fname):
get_qt_filter_extensions(self,):
----
To import this modules add this python code to your import section: +
[source,python]
----
from qtvcp.qt_istat import IStat
----
To instantiate the module so you can use it in a handler file add this python code to your instantiate section: +
[source,python]
----
INI = IStat()
----
To access IStat data use this general syntax  +
[source,python]
----
home_state = INI.NO_HOME_REQUIRED
if INI.MACHINE_IS_METRIC is True:
    print 'Metric based'
----

=== Lcnc_Action

This library is used to command linuxcnc's motion controller. +
It tries to hide incidental details and add convenience methods to developers. +

To import this modules add this python code to your import section: +
[source,python]
----
from qtvcp.qt_glib import Lcnc_Action
----
To instantiate the module so you can use it add this python code to your instantiate section: +
[source,python]
----
ACTION = Lcnc_Action()
----
To access Lcnc_Action commands use general syntax such as these: +
[source,python]
----
ACTION.SET_ESTOP_STATE(state)
ACTION.SET_MACHINE_STATE(state)
ACTION.SET_AUTO_MODE()
ACTION.RUN()
----

=== aux_program_loader

This module allows an easy way to load auxiliary programs linuxcnc often uses. +
To import this modules add this python code to your import section: +
[source,python]
----
from qtvcp.lib.aux_program_loader import Aux_program_loader
----
To instantiate the module so you can use it add this python code to your instantiated section: +
[source,python]
----
AUX_PRGM = Aux_program_loader() +
----

==== HALmeter

----
    Halmeter is used to display one HAL pin data.
    load a halmeter with AUX_PRGM.load_halmeter()
----

==== classicladder user program

Todo

==== linuxcnc status program

Todo

==== HALshow configure display program

Todo

==== HALscope program

Todo

==== tooledit program

Todo

==== calibration

Todo

==== onboard keyboard

Todo

=== Keybindings

This module is used to allow each keypress to control a behaviour such as jogging.

=== messages

This modules is used to display pop up dialog messages on the screen.

=== notify

This module is used to send messages that are integrated into the desktop.

=== preferences

This module allows one to load and save preference data permanently to storage media.

